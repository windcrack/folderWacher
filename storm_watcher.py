import os
import time
import datetime
import sys
import winreg
import threading
from pystray import Icon, MenuItem, Menu
from PIL import Image, ImageDraw
from win10toast import ToastNotifier
import tkinter as tk
from tkinter import filedialog
import json

CONFIG_FILE = os.path.join(get_base_dir(), "config.json")

APP_NAME = "PhpStormWatcher"
SEEN_FOLDERS = set()
ATIME_TRACKER = {}
notifier = ToastNotifier()

def load_or_choose_watch_path():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
            return config.get("watch_path")

    # GUI-–≤—ã–±–æ—Ä –ø–∞–ø–∫–∏
    root = tk.Tk()
    root.withdraw()
    selected_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ PhpStorm")

    if not selected_path:
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã—Ö–æ–¥.")
        exit(1)

    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump({"watch_path": selected_path}, f, ensure_ascii=False, indent=4)

    return selected_path


WATCH_PATH = load_or_choose_watch_path() # ‚Üê –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π –ø—É—Ç—å
def create_icon():
    # –ü—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞: —Å–µ—Ä–∞—è –∫—Ä—É–≥–ª–∞—è —Ç–æ—á–∫–∞
    image = Image.new('RGB', (64, 64), color=(100, 100, 100))
    draw = ImageDraw.Draw(image)
    draw.ellipse((16, 16, 48, 48), fill='blue')
    return image


def on_exit(icon, item):
    print("üõë –í—ã—Ö–æ–¥ –ø–æ –º–µ–Ω—é —Ç—Ä–µ—è.")
    icon.stop()
    os._exit(0)


def run_tray():
    icon = Icon(APP_NAME)
    icon.icon = create_icon()
    icon.menu = Menu(MenuItem('–í—ã—Ö–æ–¥', on_exit))
    icon.run()

def get_prefix():
    weekday = datetime.datetime.now().weekday()
    return "–î–µ–ª–∞–ª –≤ –ø—è—Ç–Ω–∏—Ü—É\n" if weekday == 4 else "–î–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è\n"


def get_base_dir():
    # –ü—É—Ç—å —Ä—è–¥–æ–º —Å .exe –∏–ª–∏ .py
    return os.path.dirname(os.path.abspath(sys.argv[0]))


def get_log_file_path():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    log_dir = os.path.join(get_base_dir(), "logs")
    os.makedirs(log_dir, exist_ok=True)
    return os.path.join(log_dir, f"{today}_log.txt")


def write_to_log(folder_path):
    folder_name = os.path.basename(folder_path.rstrip("\\/"))
    log_path = get_log_file_path()

    if not os.path.exists(log_path):
        with open(log_path, 'w', encoding='utf-8') as f:
            f.write(get_prefix())

    with open(log_path, 'r', encoding='utf-8') as f:
        if folder_name in f.read():
            return

    with open(log_path, 'a', encoding='utf-8') as f:
        f.write(f"{folder_name}\n")

    print(f"[LOGGED] {folder_name}")
    notifier.show_toast("PhpStorm –æ—Ç–∫—Ä—ã—Ç", folder_name, duration=4, threaded=True)


def init_tracker():
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –∫ workspace.xml"""
    for root in os.listdir(WATCH_PATH):
        full_path = os.path.join(WATCH_PATH, root)
        idea_file = os.path.join(full_path, ".idea", "workspace.xml")

        if os.path.isfile(idea_file):
            try:
                atime = os.path.getatime(idea_file)
                ATIME_TRACKER[full_path] = atime
            except Exception:
                continue


def scan_folders():
    for root in os.listdir(WATCH_PATH):
        full_path = os.path.join(WATCH_PATH, root)
        idea_file = os.path.join(full_path, ".idea", "workspace.xml")

        if os.path.isfile(idea_file):
            try:
                atime = os.path.getatime(idea_file)
                last_known = ATIME_TRACKER.get(full_path)

                if last_known is not None and atime != last_known:
                    if full_path not in SEEN_FOLDERS:
                        write_to_log(full_path)
                        SEEN_FOLDERS.add(full_path)

                ATIME_TRACKER[full_path] = atime
            except Exception:
                continue


def add_to_autostart():
    exe_path = os.path.abspath(sys.argv[0])
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                             r"Software\Microsoft\Windows\CurrentVersion\Run",
                             0, winreg.KEY_SET_VALUE)
        winreg.SetValueEx(key, APP_NAME, 0, winreg.REG_SZ, exe_path)
        winreg.CloseKey(key)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫.")
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫:", e)


# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é —Ç—Ä–µ—è –≤ —Ñ–æ–Ω–µ
threading.Thread(target=run_tray, daemon=True).start()

if __name__ == "__main__":
    print(f"üëÅ –°–ª–µ–¥–∏–º –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏ PhpStorm –≤: {WATCH_PATH}")
    add_to_autostart()
    init_tracker()

    try:
        while True:
            scan_folders()
            time.sleep(3)
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
